% Serial Line IP tests (scapy.layers.slip)

+ Tools

= ExpectException

def expect_exception(e, c):
    try:
        c()
        return False
    except e:
        return True

+ SLIPPacketizer

= Encode and decode a SLIP packet that contains escapes

p = SLIPPacketizer()
d = b'Hello, \333w\334o\300rld'
de = b'Hello, \333\335w\334o\333\334rld\300'

assert de == p.encode_frame(d)

pkts = list(p.data_received(de))
assert len(pkts) == 1
assert pkts[0][0] == d

= Handle multiple messages

p = SLIPPacketizer()
d = b'Message 1\300Message 2\300'

pkts = list(p.data_received(d))
assert len(pkts) == 2
assert pkts[0][0] == b'Message 1'
assert pkts[1][0] == b'Message 2'

= Handle incomplete message

p = SLIPPacketizer()
d = b'Message 1\300Message 2\300Incomplete message'

pkts = list(p.data_received(d))
assert len(pkts) == 2
assert pkts[0][0] == b'Message 1'
assert pkts[1][0] == b'Message 2'

# now complete it:

pkts = list(p.data_received(b' now complete!\300Incomplete more'))
assert len(pkts) == 1
assert pkts[0][0] == b'Incomplete message now complete!'

= Unknown or premature escapes

p = SLIPPacketizer()
d = b'Message \3331\300Message 2\333\300Message 3\333\300'

pkts = list(p.data_received(d))
assert len(pkts) == 3
assert pkts[0][0] == b'Message 1'
assert pkts[1][0] == b'Message 2'
assert pkts[2][0] == b'Message 3'


+ Customisations

= SLIPPacketizer invalid args

expect_exception(ValueError, lambda: SLIPPacketizer(esc_esc=None))
expect_exception(ValueError, lambda: SLIPPacketizer(esc=None))
expect_exception(ValueError, lambda: SLIPPacketizer(end_esc=None))
expect_exception(ValueError, lambda: SLIPPacketizer(end=None))
expect_exception(ValueError, lambda: SLIPPacketizer(start=b'\xff'))
expect_exception(ValueError, lambda: SLIPPacketizer(start_esc=b'\xfe'))

= Start of frame: simple

p = SLIPPacketizer(start=b'\310', start_esc=b'\336')
d = b'\310Message 1\300\310Message 2\300'

pkts = list(p.data_received(d))
assert len(pkts) == 2
assert pkts[0][0] == b'Message 1'
assert pkts[1][0] == b'Message 2'

= Start of frame: Encode and decode a SLIP packet that contains escapes

p = SLIPPacketizer(start=b'\310', start_esc=b'\336')
d = b'Hell\310o, \333w\334o\300rld'
de = b'\310Hell\333\336o, \333\335w\334o\333\334rld\300'

assert de == p.encode_frame(d)

pkts = list(p.data_received(de))
assert len(pkts) == 1
assert pkts[0][0] == d

+ PacketizerSocket

= BytesIO / StringIO: read and write packets

try:
    from io import BytesIO
except ImportError:
    # py2
    from cStringIO import StringIO as BytesIO

f = BytesIO(b'Message 1\300Message 2\300Message incomplete')
slip = slip_socket(f)

assert slip.recv() == Raw(b'Message 1')
assert slip.recv() == Raw(b'Message 2')
assert slip.recv() is None

t = f.tell()
slip.send(Raw(b'Sent message'))
# py2/3 compat
buf = f.getbuffer() if hasattr(f, 'getbuffer') else f.getvalue()

assert buf[t:] == b'Sent message\300'

slip.close()
del slip, f, buf, t

